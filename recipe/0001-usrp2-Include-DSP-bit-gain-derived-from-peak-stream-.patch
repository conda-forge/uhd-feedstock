From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Ryan Volz <rvolz@mit.edu>
Date: Tue, 8 Dec 2015 15:09:41 -0500
Subject: [PATCH] usrp2: Include DSP bit gain derived from 'peak' stream arg.

This enables use of the 'peak' stream arg in sc16 and sc8
over-the-wire modes to specify the peak value relative to 1.0
expected at the ADC input. Any resulting positive scaling required
in the DSP (from peak < 1.0) is then translated into a bit shift
and a scale factor applied in the FPGA. Using a bit shift allows
for precision gains due to decimation to be recovered by
sacrificing high order bits.
---
 host/lib/usrp/cores/rx_dsp_core_200.cpp | 21 ++++++++++++---------
 1 file changed, 12 insertions(+), 9 deletions(-)

diff --git a/host/lib/usrp/cores/rx_dsp_core_200.cpp b/host/lib/usrp/cores/rx_dsp_core_200.cpp
index 89b44290f..1345c48f0 100644
--- a/host/lib/usrp/cores/rx_dsp_core_200.cpp
+++ b/host/lib/usrp/cores/rx_dsp_core_200.cpp
@@ -226,13 +226,14 @@ public:
 
     void update_scalar(void)
     {
-        const double factor = 1.0 + std::max(ceil_log2(_scaling_adjustment), 0.0);
-        const double target_scalar =
-            (1 << 17) * _scaling_adjustment / _dsp_extra_scaling / factor;
+        const double total_gain = (1 << 17) * _scaling_adjustment / _dsp_extra_scaling;
+        boost::int32_t bitgain  = boost::math::iround(
+            std::min(std::max(ceil_log2(total_gain / (1 << 17)), 0.0), 7.0));
+        const double target_scalar  = total_gain / std::pow(2, bitgain);
         const int32_t actual_scalar = boost::math::iround(target_scalar);
-        _fxpt_scalar_correction =
-            target_scalar / actual_scalar * factor; // should be small
-        _iface->poke32(REG_DSP_RX_SCALE_IQ, actual_scalar);
+        _fxpt_scalar_correction = target_scalar / actual_scalar; // should be small
+        _iface->poke32(
+            REG_DSP_RX_SCALE_IQ, ((bitgain & 0x7) << 18) | (actual_scalar & 0x3ffff));
     }
 
     double get_scaling_adjustment(void)
@@ -269,12 +270,14 @@ public:
         unsigned format_word = 0;
         if (stream_args.otw_format == "sc16") {
             format_word         = 0;
-            _dsp_extra_scaling  = 1.0;
-            _host_extra_scaling = 1.0;
+            double peak         = stream_args.args.cast<double>("peak", 1.0);
+            peak                = std::max(peak, 1.0 / 128);
+            _dsp_extra_scaling  = peak;
+            _host_extra_scaling = peak;
         } else if (stream_args.otw_format == "sc8") {
             format_word         = (1 << 0);
             double peak         = stream_args.args.cast<double>("peak", 1.0);
-            peak                = std::max(peak, 1.0 / 256);
+            peak                = std::max(peak, 1.0 / 256 / 128);
             _host_extra_scaling = peak * 256;
             _dsp_extra_scaling  = peak * 256;
         } else
-- 
2.30.2

